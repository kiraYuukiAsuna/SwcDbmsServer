package bll

import (
	"DBMS/dal"
	"DBMS/dbmodel"
	"DBMS/logger"
	"github.com/google/uuid"
	"github.com/robfig/cron/v3"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"gopkg.in/gomail.v2"
	"log"
	"os"
	"strconv"
	"sync"
	"time"
)

var DailyStatisticsInfo dbmodel.DailyStatisticsMetaInfoV1

type OnlineUserInfo struct {
	UserInfo          dbmodel.UserMetaInfoV1
	Token             string
	expired           bool
	LastHeartBeatTime time.Time
}

var mu sync.Mutex
var OnlineUserInfoCache = map[string]OnlineUserInfo{}

func CronAutoSaveDailyStatistics() {
	c := cron.New(cron.WithSeconds(), cron.WithChain(cron.SkipIfStillRunning(cron.DefaultLogger)), cron.WithLogger(
		cron.VerbosePrintfLogger(log.New(os.Stdout, "cron: ", log.LstdFlags))))
	EntryID, err := c.AddFunc("@daily", func() {
		logger.GetLogger().Println(time.Now(), "CronAutoSaveDailyStatistics...")
		timePoint := time.Now()
		year, mouth, day := timePoint.Date()
		DailyStatisticsInfo.Base.Id = primitive.NewObjectID()
		DailyStatisticsInfo.Base.Uuid = uuid.NewString()
		DailyStatisticsInfo.Base.DataAccessModelVersion = "V1"
		DailyStatisticsInfo.Name = strconv.Itoa(year) + "-" + mouth.String() + "-" + strconv.Itoa(day)
		DailyStatisticsInfo.Day = strconv.Itoa(year) + "-" + mouth.String() + "-" + strconv.Itoa(day)
		DailyStatisticsInfo.Description = "Auto Generated by CronAutoSaveDailyStatistics."
		logger.GetLogger().Println("TimerEvent: Time - " + timePoint.String() + " , Event - CronAutoSaveDailyStatistics performed.")

		dal.CreateDailyStatistics(DailyStatisticsInfo, dal.GetDbInstance())

		DailyStatisticsInfo.CreatedProjectNumber = 0
		DailyStatisticsInfo.CreatedSwcNumber = 0
		DailyStatisticsInfo.CreateSwcNodeNumber = 0

		DailyStatisticsInfo.DeletedProjectNumber = 0
		DailyStatisticsInfo.DeletedSwcNumber = 0
		DailyStatisticsInfo.DeletedSwcNodeNumber = 0

		DailyStatisticsInfo.ModifiedProjectNumber = 0
		DailyStatisticsInfo.ModifiedSwcNumber = 0
		DailyStatisticsInfo.ModifiedSwcNodeNumber = 0

		DailyStatisticsInfo.ProjectQueryNumber = 0
		DailyStatisticsInfo.SwcQueryNumber = 0
		DailyStatisticsInfo.NodeQueryNumber = 0

		DailyStatisticsInfo.ActiveUserNumber = 0

		client := gomail.NewDialer("smtp.qq.com", 25, "1175445708@qq.com", "xxxx")

		fromEmail := "1175445708@qq.com"
		toEmail := "1756649008@qq.com"

		// 创建邮件消息
		message := gomail.NewMessage()
		message.SetHeader("From", fromEmail)
		message.SetHeader("To", toEmail)
		message.SetHeader("Subject", "Swc DailyStatistics")
		message.SetBody("text/plain", "test email content.")

		// 发送邮件消息,开携程发生邮件
		go func() {
			err := client.DialAndSend(message)
			if err != nil {
				logger.GetLogger().Println(err.Error())
			}
		}()

	})
	logger.GetLogger().Println(time.Now(), EntryID, err)
	c.Start()
}

func CronHeartBeatValidationAndRefresh() {
	c := cron.New(cron.WithSeconds(), cron.WithChain(cron.SkipIfStillRunning(cron.DefaultLogger)), cron.WithLogger(
		cron.VerbosePrintfLogger(log.New(os.Stdout, "cron: ", log.LstdFlags))))
	EntryID, err := c.AddFunc("*/60 * * * * *", func() {
		logger.GetLogger().Println(time.Now(), "CronHeartBeatValidationAndRefresh...")

		heartbeatTimeout := 8 * time.Hour
		now := time.Now()

		for key, onlineUserInfo := range OnlineUserInfoCache {
			if now.Sub(onlineUserInfo.LastHeartBeatTime) > heartbeatTimeout || onlineUserInfo.expired {
				onlineUserInfo.expired = true
				delete(OnlineUserInfoCache, key)
				logger.GetLogger().Println("User " + onlineUserInfo.UserInfo.Name + " HeartBeat expired")
			}
		}
	})
	logger.GetLogger().Println(time.Now(), EntryID, err)

	c.Start()
}

//func TestCron() {
//	c := cron.New(cron.WithSeconds(), cron.WithChain(cron.SkipIfStillRunning(cron.DefaultLogger)), cron.WithLogger(
//		cron.VerbosePrintfLogger(log.New(os.Stdout, "cron: ", log.LstdFlags))))
//	i := 1
//	EntryID, err := c.AddFunc("*/5 * * * * *", func() {
//		logger.GetLogger().Println(time.Now(), "每5s一次:", i)
//		time.Sleep(time.Second * 6)
//		i++
//	})
//	logger.GetLogger().Println(time.Now(), EntryID, err)
//
//	c.Start()
//}
